name: Auto Publish on Push

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pylint black

      - name: Run Python linter (flake8)
        continue-on-error: true
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=electron-app,venv,.venv

      - name: Check Python formatting (black)
        continue-on-error: true
        run: |
          black --check . --exclude='(electron-app|venv|\.venv|node_modules)'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: electron-app/package-lock.json

      - name: Install Node dependencies
        working-directory: electron-app
        run: npm ci

      - name: Run JavaScript linter (ESLint)
        continue-on-error: true
        working-directory: electron-app
        run: |
          npm install --save-dev eslint
          npx eslint src/ --ext .js || true

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: electron-app/package-lock.json

      - name: Install dependencies
        working-directory: electron-app
        run: npm ci

      - name: Build Electron app (Linux only for quick test)
        working-directory: electron-app
        run: npm run build -- --linux AppImage
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check build artifacts
        run: |
          ls -lh electron-app/dist/ || echo "No dist directory created"

  update-readme:
    name: Update README Badge
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create status badge
        run: |
          echo "Build passing! ✅" > build-status.txt

      - name: Commit badge
        continue-on-error: true
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add build-status.txt
          git diff --quiet && git diff --staged --quiet || git commit -m "Update build status [skip ci]"
          git push

  notify-discord:
    name: Notify Discord (Optional)
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Send Discord notification
        continue-on-error: true
        run: |
          echo "Would send Discord notification here if webhook configured"
          # Uncomment and add your Discord webhook URL:
          # curl -H "Content-Type: application/json" \
          #      -d '{"content":"✅ Price Monitor Pro: Build successful on main branch"}' \
          #      ${{ secrets.DISCORD_WEBHOOK_URL }}
