name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-electron:
    name: Build Electron App
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: electron-app/package-lock.json

      - name: Install dependencies
        working-directory: electron-app
        run: npm ci

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: electron-app
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: electron-app
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        working-directory: electron-app
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            electron-app/dist/*.dmg
            electron-app/dist/*.dmg.blockmap

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            electron-app/dist/*.exe
            electron-app/dist/*.exe.blockmap

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            electron-app/dist/*.AppImage
            electron-app/dist/*.deb

  test-python:
    name: Test Python Scripts
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify imports
        run: |
          python -c "import requests; import bs4; import selenium; print('All imports successful')"

  create-release:
    name: Create GitHub Release
    needs: [build-electron, test-python]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-all

      - name: Display structure of downloaded files
        run: ls -R dist-all

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist-all/**/*.dmg
            dist-all/**/*.exe
            dist-all/**/*.AppImage
            dist-all/**/*.deb
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
